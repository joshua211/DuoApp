@page "/"
@inject IDuolingoClient client
@inject IValuePersistence persistence
@inject NavigationManager nav

@if (skills is null)
{
    <div class="h-screen w-screen flex justify-center">
        <MudProgressCircular Indeterminate="true"></MudProgressCircular>
    </div>
}
else
{
    <MudToolBar Class="mb-5">
        <MudTextField T="string" Label="Search"
                         @bind-value="searchText"
                         Style="width: 200px"
                         Immediate="true"
                         Clearable="true"
                         AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"/>
        <MudSwitch @bind-Checked="@showUnlearned" Label="Show all"/>
    </MudToolBar>
    @if (skills.Any())
    {
        var i = 0;
        foreach (var skill in GetDisplaySkills())
        {
            @if (skill.Learned)
            {
                var color = i % 2 == 0 ? Color.Primary : Color.Secondary;
                i++;
                var link = $"/Learn/{skill.UrlTitle}";
                <MudChip Link=@link style="margin: 0.5rem" Color=@color Size="Size.Large">
                    @skill.Name
                </MudChip>
            }
            else
            {
                <MudChip  style="margin: 0.5rem" Color=@Color.Dark Disabled="true" Size="Size.Large">
                    @skill.Name
                </MudChip>
            }
        }
    }
    else
    {
        <div>No skills found!</div>
    }
}

@code {

    List<Skill> skills;

    private bool showUnlearned = false;
    private string searchText = "";

    protected override async Task OnInitializedAsync()
    {
        var username = await persistence.GetValueAsync("username");
        if (!string.IsNullOrEmpty(username))
            await client.Authenticate(username);

        if (!(await client.IsAuthenticated()))
            nav.NavigateTo("/login");
        else
        {
            skills = (await client.GetSkillsAsync())?.ToList() ?? new List<Skill>();
        }
    }

    private IEnumerable<Skill> GetDisplaySkills() => skills.Where(s =>
    {
        bool show = !(!s.Learned && !showUnlearned);
        if (!string.IsNullOrEmpty(searchText) && !s.Name.ToLower().Contains(searchText.ToLower()))
            show = false;
        return show;
    }).OrderBy(s => !s.Learned).ThenBy(s => s.Name);

}